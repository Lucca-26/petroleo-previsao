import streamlit as st

st.set_page_config(page_title="Metodologia", page_icon="üõ†Ô∏è")

st.title("üõ†Ô∏è Metodologia do Projeto")

st.write("""
Esta p√°gina detalha a metodologia completa utilizada no desenvolvimento deste projeto de an√°lise e previs√£o das oscila√ß√µes do pre√ßo do petr√≥leo Brent.
Abordaremos desde a coleta de dados at√© a implanta√ß√£o do modelo, passando pelas ferramentas, t√©cnicas e testes realizados.
""")

st.header("1. Ferramentas Utilizadas")

st.write("""
Para o desenvolvimento deste projeto, utilizamos as seguintes ferramentas:

- **Linguagem de Programa√ß√£o:**
    - **Python:** Linguagem de programa√ß√£o de alto n√≠vel, vers√°til e amplamente utilizada em ci√™ncia de dados e Machine Learning devido √† sua vasta gama de bibliotecas e frameworks.

- **Bibliotecas Python:**
    - **yfinance:** Biblioteca para coletar dados financeiros do Yahoo Finance, utilizada para obter os dados hist√≥ricos do petr√≥leo Brent.
    - **pandas:** Biblioteca para manipula√ß√£o e an√°lise de dados, utilizada para criar e manipular DataFrames.
    - **numpy:** Biblioteca para computa√ß√£o num√©rica, utilizada para realizar opera√ß√µes matem√°ticas e estat√≠sticas.
    - **scikit-learn:** Biblioteca de Machine Learning, utilizada para treinar e avaliar os modelos de previs√£o.
    - **tensorflow/keras:** Frameworks de Deep Learning, utilizados para construir e treinar o modelo LSTM.
    - **streamlit:** Biblioteca para criar aplicativos web interativos, utilizada para construir a interface do usu√°rio do projeto.
    - **plotly:** Biblioteca para cria√ß√£o de gr√°ficos interativos, utilizada para visualizar os dados e os resultados dos modelos.
    - **seaborn:** Biblioteca para visualiza√ß√£o de dados, utilizada para criar gr√°ficos estat√≠sticos.
    - **xgboost:** Biblioteca para Gradient Boosting, utilizada para treinar o modelo XGBoost.

- **Ambiente de Desenvolvimento:**
    - **Visual Studio Code (VS Code):** Editor de c√≥digo leve e poderoso, utilizado para escrever e depurar o c√≥digo Python.

- **Controle de Vers√£o:**
    - **Git:** Sistema de controle de vers√£o distribu√≠do, utilizado para gerenciar as altera√ß√µes no c√≥digo e colaborar com outros desenvolvedores.
    - **GitHub:** Plataforma de hospedagem de c√≥digo Git, utilizada para armazenar e compartilhar o c√≥digo do projeto.

- **Implanta√ß√£o (Deploy):**
    - **Streamlit Cloud:** Plataforma para implantar aplicativos Streamlit na nuvem, utilizada para disponibilizar o projeto online.
""")

st.header("2. Coleta e Pr√©-Processamento de Dados")

st.write("""
A coleta e o pr√©-processamento dos dados foram etapas cruciais para garantir a qualidade e a adequa√ß√£o dos dados para a modelagem.

- **Coleta de Dados:**
    - Utilizamos a biblioteca `yfinance` para coletar dados hist√≥ricos do pre√ßo do petr√≥leo Brent (ticker: BZ=F) diretamente do Yahoo Finance.
    - Os dados coletados incluem: data, pre√ßo de abertura, pre√ßo m√°ximo, pre√ßo m√≠nimo, pre√ßo de fechamento e volume.

- **Pr√©-Processamento de Dados:**
    1. **Tratamento de Valores Ausentes:** Removemos as linhas com valores ausentes para evitar erros nos modelos.
    2. **Detec√ß√£o e Remo√ß√£o de Outliers:** Utilizamos o m√©todo IQR (Intervalo Interquartil) para identificar e remover outliers nas vari√°veis num√©ricas.
    3. **Cria√ß√£o de Vari√°veis Derivadas (Feature Engineering):** Criamos novas vari√°veis a partir dos dados existentes para melhorar a capacidade preditiva dos modelos, incluindo:
        - **M√©dias M√≥veis (Moving Averages):** Calculamos as m√©dias m√≥veis de 5 e 10 dias para suavizar as flutua√ß√µes nos pre√ßos.
        - **Desvio Padr√£o (Standard Deviation):** Calculamos o desvio padr√£o de 5 dias para medir a volatilidade dos pre√ßos.
        - **Varia√ß√£o Di√°ria (Daily Change):** Calculamos a varia√ß√£o percentual di√°ria dos pre√ßos.

- **Vari√°veis Utilizadas:**
    - **Vari√°veis Independentes (Features):**
        - `Open`: Pre√ßo de abertura do petr√≥leo no dia.
        - `High`: Pre√ßo m√°ximo do petr√≥leo no dia.
        - `Low`: Pre√ßo m√≠nimo do petr√≥leo no dia.
        - `Close`: Pre√ßo de fechamento do petr√≥leo no dia.
        - `Moving_Avg_5`: M√©dia m√≥vel de 5 dias do pre√ßo de fechamento.
        - `Moving_Avg_10`: M√©dia m√≥vel de 10 dias do pre√ßo de fechamento.
        - `Std_Dev_5`: Desvio padr√£o de 5 dias do pre√ßo de fechamento.
        - `Daily_Change`: Varia√ß√£o percentual di√°ria do pre√ßo de fechamento.
    - **Vari√°vel Dependente (Target):**
        - `Target`: Pre√ßo de fechamento do petr√≥leo no dia seguinte (vari√°vel a ser prevista).
""")

st.header("3. Modelagem e Avalia√ß√£o")

st.write("""
A etapa de modelagem envolveu a sele√ß√£o, treinamento e avalia√ß√£o de diferentes modelos de Machine Learning para prever o pre√ßo do petr√≥leo Brent.

- **Modelos Utilizados:**
    1. **Regress√£o Linear:** Modelo linear simples que estabelece uma rela√ß√£o linear entre as vari√°veis independentes e a vari√°vel dependente.
    2. **Random Forest:** Modelo de ensemble que combina v√°rias √°rvores de decis√£o para melhorar a precis√£o e reduzir o overfitting.
    3. **XGBoost (Extreme Gradient Boosting):** Modelo de Gradient Boosting que utiliza t√©cnicas de regulariza√ß√£o para evitar o overfitting e melhorar o desempenho.
    4. **LSTM (Long Short-Term Memory):** Modelo de rede neural recorrente (RNN) que √© adequado para modelar dados sequenciais, como s√©ries temporais.

- **Testes Realizados:**
    1. **Teste com Vari√°vel de Volume:** Avaliamos a influ√™ncia da vari√°vel de volume nos modelos, dado que apresentou baixa correla√ß√£o com o Target.
    2. **An√°lise de Per√≠odos de Crise:** Avaliamos o desempenho dos modelos durante per√≠odos de crise econ√¥mica e alta volatilidade (ex: crise de 2008).
    3. **Teste Geral:** Avaliamos o desempenho geral dos modelos no conjunto completo de dados.

- **Divis√£o dos Dados:**
    - Dividimos os dados em conjuntos de treinamento (80%) e teste (20%) para treinar os modelos e avaliar seu desempenho em dados n√£o vistos.
    - Utilizamos a fun√ß√£o `train_test_split` do scikit-learn para realizar a divis√£o dos dados.

- **M√©tricas de Avalia√ß√£o:**
    - Utilizamos as seguintes m√©tricas para avaliar o desempenho dos modelos:
        - **MAE (Mean Absolute Error):** Erro absoluto m√©dio, que mede a magnitude m√©dia dos erros.
        - **RMSE (Root Mean Squared Error):** Raiz do erro quadr√°tico m√©dio, que mede a magnitude m√©dia dos erros, dando mais peso aos erros maiores.
        - **R¬≤ (R-squared):** Coeficiente de determina√ß√£o, que mede a propor√ß√£o da vari√¢ncia da vari√°vel dependente que √© explicada pelas vari√°veis independentes.

- **Resultados dos Testes:**
    - Os resultados dos testes foram os seguintes:
        ```
        üîπ Modelo: XGBoost
        MAE: 1.69
        RMSE: 2.36
        R¬≤: 95.76%

        üîπ Modelo: Random Forest
        MAE: 1.62
        RMSE: 2.27
        R¬≤: 96.07%

        üîπ Modelo: Regress√£o Linear
        MAE: 1.45
        RMSE: 2.07
        R¬≤: 96.75%

        ‚û°Ô∏è Treinando LSTM...
        Epoch 1/20
        ...
        Epoch 20/20

        üîπ Modelo: LSTM
        MAE: 14.70
        RMSE: 15.09
        R¬≤: -72.97%
        ```

- **Sele√ß√£o do Modelo:**
    - Ap√≥s avaliar os resultados dos testes, **escolhemos o modelo de Regress√£o Linear como o mais adequado para este projeto.**
    - **Motivo da Escolha:**
        - O modelo de Regress√£o Linear apresentou o melhor desempenho em termos de R¬≤ (96.75%), indicando que ele explica a maior parte da vari√¢ncia da vari√°vel dependente.
        - Al√©m disso, o modelo de Regress√£o Linear apresentou os menores valores de MAE (1.45) e RMSE (2.07), indicando que ele tem a menor magnitude m√©dia dos erros.
        - Apesar de modelos mais complexos como Random Forest e XGBoost terem desempenhos competitivos, o modelo de Regress√£o Linear oferece uma combina√ß√£o de precis√£o e simplicidade que o torna ideal para este projeto.
        - O modelo LSTM apresentou um desempenho muito inferior aos demais, com um R¬≤ negativo, indicando que ele n√£o √© adequado para este problema.
""")

st.header("4. Implanta√ß√£o (Deploy) do Projeto")

st.write("""
A implanta√ß√£o do projeto envolveu a cria√ß√£o de um aplicativo Streamlit interativo e a sua disponibiliza√ß√£o online atrav√©s do Streamlit Cloud.

- **Estrutura do Projeto:**
    - O projeto foi estruturado em um reposit√≥rio Git com os seguintes arquivos e pastas:
        - `main.py`: Arquivo principal do aplicativo Streamlit.
        - `pages/`: Pasta contendo os arquivos das p√°ginas do aplicativo.
        - `scripts/`: Pasta contendo os scripts Python com as fun√ß√µes de an√°lise e modelagem.
        - `requirements.txt`: Arquivo com a lista das bibliotecas Python necess√°rias para executar o projeto.
        - `README.md`: Arquivo com a descri√ß√£o do projeto.

- **Passos para Executar o Projeto Localmente:**
    1. **Clonar o Reposit√≥rio:**
       - Clone o reposit√≥rio Git para o seu computador utilizando o seguinte comando:
         ```bash
         git clone https://github.com/SEU_USUARIO/petroleo-previsao.git
         ```
    2. **Criar um Ambiente Virtual:**
       - Crie um ambiente virtual Python para isolar as depend√™ncias do projeto:
         ```bash
         python -m venv venv
         ```
    3. **Ativar o Ambiente Virtual:**
       - Ative o ambiente virtual:
         - No Windows:
           ```bash
           venv\\Scripts\\activate
           ```
         - No Linux/macOS:
           ```bash
           source venv/bin/activate
           ```
    4. **Instalar as Depend√™ncias:**
       - Instale as bibliotecas Python necess√°rias a partir do arquivo `requirements.txt`:
         ```bash
         pip install -r requirements.txt
         ```
    5. **Executar o Aplicativo Streamlit:**
       - Execute o aplicativo Streamlit utilizando o seguinte comando:
         ```bash
         streamlit run main.py
         ```
    6. **Acessar o Aplicativo:**
       - O aplicativo ser√° aberto automaticamente no seu navegador. Caso contr√°rio, acesse o endere√ßo exibido no terminal (geralmente `http://localhost:8501`).

- **Deploy no Streamlit Cloud:**
    1. **Criar uma Conta no Streamlit Cloud:**
       - Acesse [Streamlit Cloud](https://streamlit.io/cloud) e crie uma conta.
    2. **Conectar o Reposit√≥rio GitHub:**
       - Conecte o seu reposit√≥rio GitHub ao Streamlit Cloud.
    3. **Configurar o Aplicativo:**
       - Selecione o arquivo `main.py` como o arquivo principal do aplicativo.
       - Especifique as depend√™ncias do projeto no arquivo `requirements.txt`.
    4. **Implantar o Aplicativo:**
       - Clique no bot√£o "Deploy" para implantar o aplicativo no Streamlit Cloud.
       - O Streamlit Cloud ir√° construir o aplicativo e disponibiliz√°-lo online.

- **Acesso ao Aplicativo:**
    - Ap√≥s a implanta√ß√£o, o aplicativo estar√° acess√≠vel atrav√©s de um URL fornecido pelo Streamlit Cloud.
""")

st.header("5. Conclus√£o")

st.write("""
Este projeto demonstrou a viabilidade de utilizar t√©cnicas de Machine Learning para analisar e prever as oscila√ß√µes do pre√ßo do petr√≥leo Brent.
Atrav√©s da combina√ß√£o de coleta de dados, pr√©-processamento, modelagem e visualiza√ß√£o interativa, foi poss√≠vel criar uma ferramenta √∫til e acess√≠vel
para entender as din√¢micas do mercado de petr√≥leo.

A escolha do modelo de Regress√£o Linear, com base nos resultados dos testes, permitiu obter um bom desempenho com um modelo simples e interpretabilidade.
As ferramentas e metodologias utilizadas neste projeto podem ser aplicadas a outros problemas de previs√£o e an√°lise de dados,
contribuindo para a tomada de decis√µes mais informadas e eficientes.
""")

# Bot√µes de navega√ß√£o
col1, col2 = st.columns([1, 1])

with col1:
    if st.button("‚¨Ö Voltar"):
        st.switch_page("pages/2_Objetivo.py")

with col2:
    if st.button("‚û° Ir Para An√°lise"):
        st.switch_page("pages/4_Analise.py")